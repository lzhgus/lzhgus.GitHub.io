<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Kazehaya</title>
    <link>http://yoursite.com/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Tue, 13 Mar 2018 04:11:19 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>用 Node.Js Express MongoDB 搭建 Web 应用</title>
      <link>http://yoursite.com/2018/03/03/2018-03-02-nodejs/</link>
      <guid>http://yoursite.com/2018/03/03/2018-03-02-nodejs/</guid>
      <pubDate>Sat, 03 Mar 2018 06:12:09 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;p&gt;现在大概有上百万个关于用Node.js搭建“Hello，Wo
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>现在大概有上百万个关于用Node.js搭建“Hello，World”的教程。如果你的目标是问候这个世界然后放弃自己的职业生涯，那已经足够了。 然而大部分的我们并不是这样的， 所以我们要寻找更多更好的教程。 我也寻找了不少， 所以总结了很多， 希望这个教程能够对刚开始学习Node.js 或者想从事网页开发的你有所帮助。</p><h2 id="Part-1-15分钟的安装"><a href="#Part-1-15分钟的安装" class="headerlink" title="Part 1 - 15分钟的安装"></a>Part 1 - 15分钟的安装</h2><h3 id="Step-1-安装-Node-js-和-NPM"><a href="#Step-1-安装-Node-js-和-NPM" class="headerlink" title="Step 1 - 安装 Node.js 和 NPM"></a>Step 1 - 安装 Node.js 和 NPM</h3><ol><li>XCode 在Mac上安装XCode</li><li><p>Homebrew 这是Mac上用于package管理的</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ruby -e <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></span><br></pre></td></tr></table></figure></li><li><p>打开Terminal 安装node.js</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install node</span><br></pre></td></tr></table></figure></li></ol><h3 id="Step2-安装-Express-Generator"><a href="#Step2-安装-Express-Generator" class="headerlink" title="Step2 - 安装 Express Generator"></a>Step2 - 安装 Express Generator</h3><p>Express 是基于Node.js的Web开发框架，可以快速地搭建一个完整功能的网站<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g express-generator</span><br></pre></td></tr></table></figure></p><p>More info: <a href="http://javascript.ruanyifeng.com/nodejs/express.html" target="_blank" rel="noopener">Express</a></p><h3 id="Step3-创建-Express-项目"><a href="#Step3-创建-Express-项目" class="headerlink" title="Step3 - 创建 Express 项目"></a>Step3 - 创建 Express 项目</h3><p>这里我们将会用到Express和Jade，而不是常用的CSS. 因为我们必须用Jade或者其他的模板引擎去得到基于Node/Express的数据。 </p><p>现在我们用express来创建一个叫做 nodetest1 的项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ express nodetest1</span><br></pre></td></tr></table></figure><p><img src="/uploads/2018-03-02-01.png" alt="alt text"></p><p>More info: <a href="https://segmentfault.com/a/1190000000357534" target="_blank" rel="noopener">Jade</a></p><h3 id="Step4-修改-Dependencies"><a href="#Step4-修改-Dependencies" class="headerlink" title="Step4 - 修改 Dependencies"></a>Step4 - 修改 Dependencies</h3><p>Express-generator 自动帮我们创建了package.json文件</p><p><img src="/uploads/2018-03-02-02.png" alt="alt text"></p><p>这个文件里包含了项目所有的dependencies. 我们将添加MongoDB和Monk, 版本3.0.1/6.0.5</p><p><img src="/uploads/2018-03-02-03.png" alt="alt text"></p><h3 id="Step5-安装-Dependencies"><a href="#Step5-安装-Dependencies" class="headerlink" title="Step5 - 安装 Dependencies"></a>Step5 - 安装 Dependencies</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install</span><br></pre></td></tr></table></figure><p>npm 将会根据JSON文件安装所有所需求的dependencies, 包括Express， 我们虽然安装了全局的Express，但是对于指定的项目我们还是需要安装实际的module.<br>现在我们就可以跑项目了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm start</span><br></pre></td></tr></table></figure><p><img src="/uploads/2018-03-02-04.png" alt="alt text"></p><p>如图可见就是我们运行起来的Node.JS的webserver， 下面有一些Express.js的Cheat Sheet</p><p>More info: <a href="https://github.com/azat-co/cheatsheets/tree/master/express4" target="_blank" rel="noopener">Express.js</a></p><h2 id="Part-2-哈哈-既然打开了Node-Js的大门-我们也要高喊一声-“Hello-World”"><a href="#Part-2-哈哈-既然打开了Node-Js的大门-我们也要高喊一声-“Hello-World”" class="headerlink" title="Part 2 哈哈 既然打开了Node.Js的大门 我们也要高喊一声 “Hello, World”"></a>Part 2 哈哈 既然打开了Node.Js的大门 我们也要高喊一声 “Hello, World”</h2><p>随便有你喜欢的IDE或者editor打开我们项目中的 app.js</p><p><img src="/uploads/2018-03-02-05.png" alt="alt text"></p><p>在app.js中我们建了一串Javascript变量， 它们关联到特定的packages，dependencies，node functionality 和 routes. Routes在setup中把models和controllers组合起来，当然我们也可以用Express来搭建MVC架构， 之后我可以单独的介绍. 我们先暂时忽略Express为我们创建的user route， 我们现在只用到最顶层的route (/node/nodetest1/routes/index.js)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = express();</span><br></pre></td></tr></table></figure><p>这将会初始化Express同时设置所有的app 变量. 下一节中我们会用这些变量配置我们的Express</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="comment">// view engine setup</span></span><br><span class="line">app.set(<span class="string">'views'</span>, path.join(dirname, <span class="string">'views'</span>));</span><br><span class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'jade'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// uncomment after placing your favicon in /public</span></span><br><span class="line"><span class="comment">// app.use(favicon(dirname + '/public/favicon.ico'));</span></span><br><span class="line">app.use(logger(<span class="string">'dev'</span>));</span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;));</span><br><span class="line">app.use(cookieParser());</span><br><span class="line">app.use(express.static(path.join(__dirname, <span class="string">'public'</span>)));</span><br><span class="line"></span><br><span class="line">app.use(<span class="string">'/'</span>, routes);</span><br><span class="line">app.use(<span class="string">'/users'</span>, users);</span><br></pre></td></tr></table></figure><p>上段代码告诉我们哪里能找到views以及什么引擎会渲染views (Jade)，同时call了一些方法确保项目能跑起来。这里要说的是最后一行指令Express从/public/dir起创建静态对象，但是让他们看起来是root dir或者说是top level. 比如说images的路径是 c:\node\nodetest1\public\images … 但是我们可以用 <a href="http://localhost:3000/images" target="_blank" rel="noopener">http://localhost:3000/images</a> 找到他们.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// catch 404 and forwarding to error handler</span></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> err = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Not Found'</span>);</span><br><span class="line">  err.status = <span class="number">404</span>;</span><br><span class="line">  next(err);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// error handler</span></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">err, req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// set locals, only providing error in development</span></span><br><span class="line">  res.locals.message = err.message;</span><br><span class="line">  res.locals.error = req.app.get(<span class="string">'env'</span>) === <span class="string">'development'</span> ? err : &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// render the error page</span></span><br><span class="line">  res.status(err.status || <span class="number">500</span>);</span><br><span class="line">  res.render(<span class="string">'error'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这是production和development的error handler， 很明显在production模式下我们并不想打印出所有的stack trace让所有人看见</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = app;</span><br></pre></td></tr></table></figure><p>Node的一个核心思想是所有的模块都会输出一个对象，然后这个对象可以在任意其他地方调用，我们的Master app将会输出这个app对象. </p><p>现在我们就要在页面中展示”hellow, world!”了， 当然我们不仅限于此， 更重要的是借此机会我们会学一些routes， 同时了解一下Jade是如何将页面一起展示出的.</p><p>我们会从加一个新的app开始， 调用如下指令</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="string">'/'</span>, routes);</span><br><span class="line">app.use(<span class="string">'/user'</span>, users);</span><br></pre></td></tr></table></figure><p>这个指令告诉了Express什么routes文件将会被调用, 一般来说, 我提倡对项目中不同的部分创建不同的route文件. 比如说users route文件可能包含了adding users， deleting user, updating users等等routes， 同时如果我们有另一个新的route文件“locations”，它可能同样包含了adding, editing, deleting和displaying. 现在为了简单， 我将会把所有的routes都放进index router, 你可以完全忽视users.</p><p>记住的是Express框架已经在index router中定义了routes变量，我们将会给这个router加一个新的“helloworld“方法， 这个方法将会渲染一个新的页面而不是默认界面, 在你的编辑器中找到routes文件夹和index.js文件. 如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.Router();</span><br><span class="line"></span><br><span class="line"><span class="comment">// GET home page. </span></span><br><span class="line">router.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.render(<span class="string">'index'</span>, &#123; <span class="attr">title</span>: <span class="string">'Express'</span> &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router;</span><br></pre></td></tr></table></figure><p>这简单地说就是当我们请求HTTP拿到根目录的时候，会调用Express的router方法，并最终输出这个router方法给我的app.</p><p>我们可以复制这段get代码，从而拿到helloworld页面. 在exports上面加入以下代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// GET Hello World page. </span></span><br><span class="line">router.get(<span class="string">'/helloworld'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.render(<span class="string">'helloworld'</span>, &#123; <span class="attr">title</span>: <span class="string">'Hello, World!'</span> &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这段代码会处理URL的路径选择， 但是我们并没有页面去渲染render，这时Jade就派上用场了。 你可以打开index.jade进行修改，也可以重新建立一个文件helloworld.jade.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">extends layout</span><br><span class="line"></span><br><span class="line">block content</span><br><span class="line">  h1= title</span><br><span class="line">  p Welcome to #&#123;title&#125;</span><br></pre></td></tr></table></figure><p>这段代码十分的直观，引用了layout.jade作为模板，然后在layout中的content中加入header和paragraph. title是我们从index.js中传入的变量。</p><p>打开终端， ctrl-c 关闭已跑的server，然后再次输入 npm start，重新启动server，地址栏输入<a href="http://localhost:3000/helloworld" target="_blank" rel="noopener">http://localhost:3000/helloworld</a></p><p><img src="/uploads/2018-03-02-06.png" alt="alt text"></p><p>现在为止我们就知道如何用router选择页面了</p><p>More info: </p><ul><li><a href="http://blog.csdn.net/qq_14998713/article/details/62416901" target="_blank" rel="noopener">Morgan</a> </li><li><a href="https://www.cnblogs.com/chyingp/p/node-learning-guide-express-morgan.html" target="_blank" rel="noopener">logs</a></li><li><a href="https://github.com/expressjs/cookie-parser" target="_blank" rel="noopener">cookie-parser</a></li></ul><h2 id="Part-3-创建数据库以及读取数据"><a href="#Part-3-创建数据库以及读取数据" class="headerlink" title="Part 3 创建数据库以及读取数据"></a>Part 3 创建数据库以及读取数据</h2><h3 id="Step-1-安装MongoDB"><a href="#Step-1-安装MongoDB" class="headerlink" title="Step 1 - 安装MongoDB"></a>Step 1 - 安装MongoDB</h3><p>之前运行npm install的时候会根据package里的dependencies安装MongoDB， 如果没有的话可以运行以下指令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install mongodb --save</span><br></pre></td></tr></table></figure></p><h3 id="Step-2-运行mongod和mongo"><a href="#Step-2-运行mongod和mongo" class="headerlink" title="Step 2 - 运行mongod和mongo"></a>Step 2 - 运行mongod和mongo</h3><p>在nodetest1的目录中创建子目录data<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir data</span><br></pre></td></tr></table></figure></p><p>接下来启动mongo server, 我们的例子的话就是mongod –dbpath data<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mongod --dbpath [wherever you put your data folder]</span><br></pre></td></tr></table></figure></p><p>这时在terminal输入mongo的话， 会创建mongo实例， 同时database的connect已经连接上了<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ mongo</span><br><span class="line">MongoDB shell version v3.6.2</span><br><span class="line">connecting to: mongodb://127.0.0.1:27017</span><br><span class="line">MongoDB server version: 3.6.2</span><br><span class="line">Server has startup warnings:</span><br></pre></td></tr></table></figure></p><h3 id="Step-3-创建数据库"><a href="#Step-3-创建数据库" class="headerlink" title="Step 3 - 创建数据库"></a>Step 3 - 创建数据库</h3><p>在terminal直接输入以下代码，会自动创建或者使用你命名的数据库<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ use nodetest1</span><br></pre></td></tr></table></figure></p><p>此时我们就会使用nodetest这个数据库了</p><h3 id="Step-4-加入数据"><a href="#Step-4-加入数据" class="headerlink" title="Step 4 - 加入数据"></a>Step 4 - 加入数据</h3><p>mongodb最让人喜欢的一点可能就是它用JSON定义了结构，或者说是sql里的schema. 让我们嘉瑞一些数据到collection里面. 我们将会有一个简单的数据库，定义用户名，邮箱。 结构如下<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"_id"</span> : <span class="number">1234</span>,</span><br><span class="line">    <span class="attr">"username"</span> : <span class="string">"cwbuecheler"</span>,</span><br><span class="line">    <span class="attr">"email"</span> : <span class="string">"cwbuecheler@nospam.com"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>你当然也可以创建一个自己的id， 但是我认为最好还是让mongo去处理， 因为mongo会自动给每一个高层的数据提供单独的id.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.usercollection.insert(&#123; <span class="string">"username"</span> : <span class="string">"testuser1"</span>, <span class="string">"email"</span> : <span class="string">"testuser1@testdomain.com"</span> &#125;)</span><br></pre></td></tr></table></figure><p>值得指出的是， 这里面的db代表我们的数据库， 也就是上面我们定义过的nodetest1， usercollection可以理解为一个叫做user的table， 而且我们没有必要创建它， 当我们第一次添加值得时候， 它会自动被创建. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.usercollection.find().pretty()</span><br></pre></td></tr></table></figure><p>上面的而一段代码可以帮助我们输出collection里面的数据如下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"_id"</span> : ObjectId(<span class="string">"5202b481d2184d390cbf6eca"</span>),</span><br><span class="line">    <span class="string">"username"</span> : <span class="string">"testuser1"</span>,</span><br><span class="line">    <span class="string">"email"</span> : <span class="string">"testuser1@testdomain.com"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>再输入一些数据<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">newstuff = [&#123; <span class="string">"username"</span> : <span class="string">"testuser2"</span>, <span class="string">"email"</span> : <span class="string">"testuser2@testdomain.com"</span> &#125;, &#123; <span class="string">"username"</span> : <span class="string">"testuser3"</span>, <span class="string">"email"</span> : <span class="string">"testuser3@testdomain.com"</span> &#125;]</span><br><span class="line">db.usercollection.insert(newstuff);</span><br></pre></td></tr></table></figure></p><p>现在我们可以开始与web server的交互了， 你可以用ctrl-c来退出MongoDB控制台。</p><h3 id="Step-5-连接Mongo和Node"><a href="#Step-5-连接Mongo和Node" class="headerlink" title="Step 5 - 连接Mongo和Node"></a>Step 5 - 连接Mongo和Node</h3><p>我们目标生成如下一个HTML<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"mailto:testuser1@testdomain.com"</span>&gt;</span>testuser1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"mailto:testuser2@testdomain.com"</span>&gt;</span>testuser2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"mailto:testuser3@testdomain.com"</span>&gt;</span>testuser3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>你可能会说这个教程是不是也太简单了，对，在这个教程中我们就是要教会最简单的DB读写， 而不是写一个完整的网站. 首先我们需要在app.js中加入最关键的代码以确保能够连上我们的MongoDB. C:\node\nodetest1\app.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">var</span> favicon = <span class="built_in">require</span>(<span class="string">'serve-favicon'</span>);</span><br><span class="line"><span class="keyword">var</span> logger = <span class="built_in">require</span>(<span class="string">'morgan'</span>);</span><br><span class="line"><span class="keyword">var</span> cookieParser = <span class="built_in">require</span>(<span class="string">'cookie-parser'</span>);</span><br><span class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>);</span><br></pre></td></tr></table></figure><p>加入如下三行<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">var</span> favicon = <span class="built_in">require</span>(<span class="string">'serve-favicon'</span>);</span><br><span class="line"><span class="keyword">var</span> logger = <span class="built_in">require</span>(<span class="string">'morgan'</span>);</span><br><span class="line"><span class="keyword">var</span> cookieParser = <span class="built_in">require</span>(<span class="string">'cookie-parser'</span>);</span><br><span class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// New Code</span></span><br><span class="line"><span class="keyword">var</span> mongo = <span class="built_in">require</span>(<span class="string">'mongodb'</span>);</span><br><span class="line"><span class="keyword">var</span> monk = <span class="built_in">require</span>(<span class="string">'monk'</span>);</span><br><span class="line"><span class="keyword">var</span> db = monk(<span class="string">'localhost:27017/nodetest1'</span>);</span><br></pre></td></tr></table></figure></p><p>这三行的意思是我们用’monk’来连接MongoDB，伺服器位置是’localhost’, port是’27017’(MongoDB预设)，数据库名称是’nodetest1’.</p><p>More info: </p><ul><li><a href="https://www.npmjs.com/package/monk" target="_blank" rel="noopener">Monk</a></li><li><a href="https://codeday.me/bug/20170727/47313.html" target="_blank" rel="noopener">Monk vs Mongoose</a> </li></ul>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/03/03/2018-03-02-nodejs/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>

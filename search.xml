<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>用 Node.Js Express MongoDB 搭建 Web 应用</title>
      <link href="/2018/03/03/2018-03-02-nodejs/"/>
      <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>现在大概有上百万个关于用Node.js搭建“Hello，World”的教程。如果你的目标是问候这个世界然后放弃自己的职业生涯，那已经足够了。 然而大部分的我们并不是这样的， 所以我们要寻找更多更好的教程。 我也寻找了不少， 所以总结了很多， 希望这个教程能够对刚开始学习Node.js 或者想从事网页开发的你有所帮助。</p><h2 id="Part-1-15分钟的安装"><a href="#Part-1-15分钟的安装" class="headerlink" title="Part 1 - 15分钟的安装"></a>Part 1 - 15分钟的安装</h2><h3 id="Step-1-安装-Node-js-和-NPM"><a href="#Step-1-安装-Node-js-和-NPM" class="headerlink" title="Step 1 - 安装 Node.js 和 NPM"></a>Step 1 - 安装 Node.js 和 NPM</h3><ol><li>XCode 在Mac上安装XCode</li><li><p>Homebrew 这是Mac上用于package管理的</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ruby -e <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></span><br></pre></td></tr></table></figure></li><li><p>打开Terminal 安装node.js</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install node</span><br></pre></td></tr></table></figure></li></ol><h3 id="Step2-安装-Express-Generator"><a href="#Step2-安装-Express-Generator" class="headerlink" title="Step2 - 安装 Express Generator"></a>Step2 - 安装 Express Generator</h3><p>Express 是基于Node.js的Web开发框架，可以快速地搭建一个完整功能的网站<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g express-generator</span><br></pre></td></tr></table></figure></p><p>More info: <a href="http://javascript.ruanyifeng.com/nodejs/express.html" target="_blank" rel="noopener">Express</a></p><h3 id="Step3-创建-Express-项目"><a href="#Step3-创建-Express-项目" class="headerlink" title="Step3 - 创建 Express 项目"></a>Step3 - 创建 Express 项目</h3><p>这里我们将会用到Express和Jade，而不是常用的CSS. 因为我们必须用Jade或者其他的模板引擎去得到基于Node/Express的数据。 </p><p>现在我们用express来创建一个叫做 nodetest1 的项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ express nodetest1</span><br></pre></td></tr></table></figure><p><img src="/uploads/2018-03-02-01.png" alt="alt text"></p><p>More info: <a href="https://segmentfault.com/a/1190000000357534" target="_blank" rel="noopener">Jade</a></p><h3 id="Step4-修改-Dependencies"><a href="#Step4-修改-Dependencies" class="headerlink" title="Step4 - 修改 Dependencies"></a>Step4 - 修改 Dependencies</h3><p>Express-generator 自动帮我们创建了package.json文件</p><p><img src="/uploads/2018-03-02-02.png" alt="alt text"></p><p>这个文件里包含了项目所有的dependencies. 我们将添加MongoDB和Monk, 版本3.0.1/6.0.5</p><p><img src="/uploads/2018-03-02-03.png" alt="alt text"></p><h3 id="Step5-安装-Dependencies"><a href="#Step5-安装-Dependencies" class="headerlink" title="Step5 - 安装 Dependencies"></a>Step5 - 安装 Dependencies</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install</span><br></pre></td></tr></table></figure><p>npm 将会根据JSON文件安装所有所需求的dependencies, 包括Express， 我们虽然安装了全局的Express，但是对于指定的项目我们还是需要安装实际的module.<br>现在我们就可以跑项目了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm start</span><br></pre></td></tr></table></figure><p><img src="/uploads/2018-03-02-04.png" alt="alt text"></p><p>如图可见就是我们运行起来的Node.JS的webserver， 下面有一些Express.js的Cheat Sheet</p><p>More info: <a href="https://github.com/azat-co/cheatsheets/tree/master/express4" target="_blank" rel="noopener">Express.js</a></p><h2 id="Part-2-哈哈-既然打开了Node-Js的大门-我们也要高喊一声-“Hello-World”"><a href="#Part-2-哈哈-既然打开了Node-Js的大门-我们也要高喊一声-“Hello-World”" class="headerlink" title="Part 2 哈哈 既然打开了Node.Js的大门 我们也要高喊一声 “Hello, World”"></a>Part 2 哈哈 既然打开了Node.Js的大门 我们也要高喊一声 “Hello, World”</h2><p>随便有你喜欢的IDE或者editor打开我们项目中的 app.js</p><p><img src="/uploads/2018-03-02-05.png" alt="alt text"></p><p>在app.js中我们建了一串Javascript变量， 它们关联到特定的packages，dependencies，node functionality 和 routes. Routes在setup中把models和controllers组合起来，当然我们也可以用Express来搭建MVC架构， 之后我可以单独的介绍. 我们先暂时忽略Express为我们创建的user route， 我们现在只用到最顶层的route (/node/nodetest1/routes/index.js)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = express();</span><br></pre></td></tr></table></figure><p>这将会初始化Express同时设置所有的app 变量. 下一节中我们会用这些变量配置我们的Express</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="comment">// view engine setup</span></span><br><span class="line">app.set(<span class="string">'views'</span>, path.join(dirname, <span class="string">'views'</span>));</span><br><span class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'jade'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// uncomment after placing your favicon in /public</span></span><br><span class="line"><span class="comment">// app.use(favicon(dirname + '/public/favicon.ico'));</span></span><br><span class="line">app.use(logger(<span class="string">'dev'</span>));</span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;));</span><br><span class="line">app.use(cookieParser());</span><br><span class="line">app.use(express.static(path.join(__dirname, <span class="string">'public'</span>)));</span><br><span class="line"></span><br><span class="line">app.use(<span class="string">'/'</span>, routes);</span><br><span class="line">app.use(<span class="string">'/users'</span>, users);</span><br></pre></td></tr></table></figure><p>上段代码告诉我们哪里能找到views以及什么引擎会渲染views (Jade)，同时call了一些方法确保项目能跑起来。这里要说的是最后一行指令Express从/public/dir起创建静态对象，但是让他们看起来是root dir或者说是top level. 比如说images的路径是 c:\node\nodetest1\public\images … 但是我们可以用 <a href="http://localhost:3000/images" target="_blank" rel="noopener">http://localhost:3000/images</a> 找到他们.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// catch 404 and forwarding to error handler</span></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> err = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Not Found'</span>);</span><br><span class="line">  err.status = <span class="number">404</span>;</span><br><span class="line">  next(err);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// error handler</span></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">err, req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// set locals, only providing error in development</span></span><br><span class="line">  res.locals.message = err.message;</span><br><span class="line">  res.locals.error = req.app.get(<span class="string">'env'</span>) === <span class="string">'development'</span> ? err : &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// render the error page</span></span><br><span class="line">  res.status(err.status || <span class="number">500</span>);</span><br><span class="line">  res.render(<span class="string">'error'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这是production和development的error handler， 很明显在production模式下我们并不想打印出所有的stack trace让所有人看见</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = app;</span><br></pre></td></tr></table></figure><p>Node的一个核心思想是所有的模块都会输出一个对象，然后这个对象可以在任意其他地方调用，我们的Master app将会输出这个app对象. </p><p>现在我们就要在页面中展示”hellow, world!”了， 当然我们不仅限于此， 更重要的是借此机会我们会学一些routes， 同时了解一下Jade是如何将页面一起展示出的.</p><p>我们会从加一个新的app开始， 调用如下指令</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="string">'/'</span>, routes);</span><br><span class="line">app.use(<span class="string">'/user'</span>, users);</span><br></pre></td></tr></table></figure><p>这个指令告诉了Express什么routes文件将会被调用, 一般来说, 我提倡对项目中不同的部分创建不同的route文件. 比如说users route文件可能包含了adding users， deleting user, updating users等等routes， 同时如果我们有另一个新的route文件“locations”，它可能同样包含了adding, editing, deleting和displaying. 现在为了简单， 我将会把所有的routes都放进index router, 你可以完全忽视users.</p><p>Remember that the Express scaffolding already defined the “routes” variable and pointed it at the index router. We’re going to add a “helloworld” method to that router which will render a different page than the default. In your text editor, open up your routes folder, find index.js, and open it. It will look like this:</p><p>记住的是Express框架已经在index router中定义了routes变量，我们将会给这个router加一个新的“helloworld“方法， 这个方法将会渲染一个新的页面而不是默认界面, 在你的编辑器中找到routes文件夹和index.js文件. 如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.Router();</span><br><span class="line"></span><br><span class="line"><span class="comment">// GET home page. </span></span><br><span class="line">router.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.render(<span class="string">'index'</span>, &#123; <span class="attr">title</span>: <span class="string">'Express'</span> &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router;</span><br></pre></td></tr></table></figure><p>这简单地说就是当我们请求HTTP拿到根目录的时候，会调用Express的router方法，并最终输出这个router方法给我的app.</p><p>我们可以复制这段get代码，从而拿到helloworld页面. 在exports上面加入以下代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// GET Hello World page. </span></span><br><span class="line">router.get(<span class="string">'/helloworld'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.render(<span class="string">'helloworld'</span>, &#123; <span class="attr">title</span>: <span class="string">'Hello, World!'</span> &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>More info: </p><ul><li><a href="http://blog.csdn.net/qq_14998713/article/details/62416901" target="_blank" rel="noopener">Morgan</a> </li><li><a href="https://www.cnblogs.com/chyingp/p/node-learning-guide-express-morgan.html" target="_blank" rel="noopener">logs</a></li><li><a href="https://github.com/expressjs/cookie-parser" target="_blank" rel="noopener">cookie-parser</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> Node.Js </tag>
            
            <tag> MongoDB </tag>
            
            <tag> Express </tag>
            
        </tags>
      
    </entry>
    
  
  
    
    <entry>
      <title>About</title>
      <link href="/about/index.html"/>
      <content type="html"><![CDATA[<h2 id="Zhihao-Li"><a href="#Zhihao-Li" class="headerlink" title="Zhihao Li"></a>Zhihao Li</h2><hr><p>Wake up early. Drink coffee. Work hard. Be ambitious. Keep your priorities straight, your mind right and your head up. Do well, live well and play really well. Do what you love, love what you do.</p><h3 id="PROCESS"><a href="#PROCESS" class="headerlink" title="PROCESS"></a>PROCESS</h3><p>I am preparing to become a greate developer and photographer. The most important thing for me is to continually improve myself and prove myself.</p><h3 id="PHILOSOPHY"><a href="#PHILOSOPHY" class="headerlink" title="PHILOSOPHY"></a>PHILOSOPHY</h3><p>Stay hungry. Stay foolish.</p><p>If you can’t forget yesterday, you won’t have a better tomorrow.</p><p>If you dedicate time to do things you like, you’ll become good at them. But if instead, you focused all your energy on negatives thoghts, you’ll simply reinforce them. Definitly, I like coding and photography.</p><h3 id="EXPERIENCES"><a href="#EXPERIENCES" class="headerlink" title="EXPERIENCES"></a>EXPERIENCES</h3><p>SOLFWARE DEVELOPER<br>GEP</p><p>June 2015 – Now </p><h3 id="Skills"><a href="#Skills" class="headerlink" title="Skills"></a>Skills</h3><p>VSP.NET/C#/JAVA/Python/PHP/Node.js<br>AngularJS/Angular 5/ReactJS/JQuery<br>MongoDB/MySQL/ElasticSearch</p><p>Photography</p><hr><h2 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h2><p>设计狮到程序猿の进击</p><hr><p>我不在乎这个世界是怎么回事 </p><p>我只想弄清楚如何在其中生活的精彩</p><hr><p>蜀黍和少年の矛盾体</p><hr><p>三分归元气，七分靠打拼</p><p>剩下九十分看长相</p><hr><p>这波深藏功与名， 这波只能赢</p><hr><p>梦想这东西和经典一样</p><p>永远不会因为时间而褪色</p><p>反而更显珍贵</p><hr><p>你今后会得到很多，也会失去很多</p><p>然而有两样东西，你要记得一定不可以丢弃</p><p>一样叫做理想， 一样叫做良知</p>]]></content>
    </entry>
    
    <entry>
      <title>All tags</title>
      <link href="/tags/index.html"/>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
  
</search>

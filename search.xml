<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>MEAN Stack (Angular5) CRUD Web Application Example</title>
      <link href="/2018/07/05/Angular5-2/"/>
      <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>这篇文章我们接着学习Angular5, NodeJs Create-Read-Update-Delete(CRUD) web应用， 其中还会用到MongoDB, Mongo daemon.</p><h2 id="1-Update-Angular-CLI-and-Create-Angular5-Application"><a href="#1-Update-Angular-CLI-and-Create-Angular5-Application" class="headerlink" title="1. Update Angular CLI and Create Angular5 Application"></a>1. Update Angular CLI and Create Angular5 Application</h2><p>之前的博客中已经介绍了， 具体指令如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install -g @angular/cli</span><br><span class="line">ng new mean-angular5</span><br><span class="line">cd mean-angular5</span><br><span class="line">ng server -o</span><br></pre></td></tr></table></figure><p><img src="/uploads/2018-07-02-01.png" alt="alt text"></p><h2 id="2-Replace-Web-Server-with-Express-js"><a href="#2-Replace-Web-Server-with-Express-js" class="headerlink" title="2. Replace Web Server with Express.js"></a>2. Replace Web Server with Express.js</h2><h3 id="step1"><a href="#step1" class="headerlink" title="step1"></a>step1</h3><p>首先关掉运行中的项目，输入’ctrl+c’, 然后安装Express.js 组件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save express body-parser morgan body-parser serve-favicon</span><br></pre></td></tr></table></figure><h3 id="step2"><a href="#step2" class="headerlink" title="step2"></a>step2</h3><p>创建bin文件夹， 并加入www文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir bin</span><br><span class="line">touch bin/www</span><br></pre></td></tr></table></figure></p><p>打开并编辑www文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env node</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Module dependencies.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">var app = require(&apos;../app&apos;);</span><br><span class="line">var debug = require(&apos;debug&apos;)(&apos;mean-app:server&apos;);</span><br><span class="line">var http = require(&apos;http&apos;);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Get port from environment and store in Express.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">var port = normalizePort(process.env.PORT || &apos;3000&apos;);</span><br><span class="line">app.set(&apos;port&apos;, port);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Create HTTP server.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">var server = http.createServer(app);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Listen on provided port, on all network interfaces.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">server.listen(port);</span><br><span class="line">server.on(&apos;error&apos;, onError);</span><br><span class="line">server.on(&apos;listening&apos;, onListening);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Normalize a port into a number, string, or false.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">function normalizePort(val) &#123;</span><br><span class="line">  var port = parseInt(val, 10);</span><br><span class="line"></span><br><span class="line">  if (isNaN(port)) &#123;</span><br><span class="line">    // named pipe</span><br><span class="line">    return val;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  if (port &gt;= 0) &#123;</span><br><span class="line">    // port number</span><br><span class="line">    return port;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Event listener for HTTP server &quot;error&quot; event.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">function onError(error) &#123;</span><br><span class="line">  if (error.syscall !== &apos;listen&apos;) &#123;</span><br><span class="line">    throw error;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  var bind = typeof port === &apos;string&apos;</span><br><span class="line">    ? &apos;Pipe &apos; + port</span><br><span class="line">    : &apos;Port &apos; + port;</span><br><span class="line"></span><br><span class="line">  // handle specific listen errors with friendly messages</span><br><span class="line">  switch (error.code) &#123;</span><br><span class="line">    case &apos;EACCES&apos;:</span><br><span class="line">      console.error(bind + &apos; requires elevated privileges&apos;);</span><br><span class="line">      process.exit(1);</span><br><span class="line">      break;</span><br><span class="line">    case &apos;EADDRINUSE&apos;:</span><br><span class="line">      console.error(bind + &apos; is already in use&apos;);</span><br><span class="line">      process.exit(1);</span><br><span class="line">      break;</span><br><span class="line">    default:</span><br><span class="line">      throw error;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Event listener for HTTP server &quot;listening&quot; event.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">function onListening() &#123;</span><br><span class="line">  var addr = server.address();</span><br><span class="line">  var bind = typeof addr === &apos;string&apos;</span><br><span class="line">    ? &apos;pipe &apos; + addr</span><br><span class="line">    : &apos;port &apos; + addr.port;</span><br><span class="line">  debug(&apos;Listening on &apos; + bind);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="step3"><a href="#step3" class="headerlink" title="step3"></a>step3</h3><p>打开并编辑”package.json”, 替换”start”, 这样可以让server在运行时先运行www文件<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  "ng": "ng",</span><br><span class="line">  "start": "ng build &amp;&amp; node ./bin/www",</span><br><span class="line">  "build": "ng build",</span><br><span class="line">  "test": "ng test",</span><br><span class="line">  "lint": "ng lint",</span><br><span class="line">  "e2e": "ng e2e"</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><h3 id="step3-1"><a href="#step3-1" class="headerlink" title="step3"></a>step3</h3><p>在根目录创建app.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch app.js</span><br></pre></td></tr></table></figure></p><p>打开并编辑<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">var</span> favicon = <span class="built_in">require</span>(<span class="string">'serve-favicon'</span>);</span><br><span class="line"><span class="keyword">var</span> logger = <span class="built_in">require</span>(<span class="string">'morgan'</span>);</span><br><span class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> book = <span class="built_in">require</span>(<span class="string">'./routes/book'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line">app.use(logger(<span class="string">'dev'</span>));</span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line">app.use(bodyParser.urlencoded(&#123;<span class="string">'extended'</span>:<span class="string">'false'</span>&#125;));</span><br><span class="line">app.use(express.static(path.join(__dirname, <span class="string">'dist'</span>)));</span><br><span class="line">app.use(<span class="string">'/books'</span>, express.static(path.join(__dirname, <span class="string">'dist'</span>)));</span><br><span class="line">app.use(<span class="string">'/book'</span>, book);</span><br><span class="line"></span><br><span class="line"><span class="comment">// catch 404 and forward to error handler</span></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> err = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Not Found'</span>);</span><br><span class="line">  err.status = <span class="number">404</span>;</span><br><span class="line">  next(err);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// error handler</span></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">err, req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// set locals, only providing error in development</span></span><br><span class="line">  res.locals.message = err.message;</span><br><span class="line">  res.locals.error = req.app.get(<span class="string">'env'</span>) === <span class="string">'development'</span> ? err : &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// render the error page</span></span><br><span class="line">  res.status(err.status || <span class="number">500</span>);</span><br><span class="line">  res.render(<span class="string">'error'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = app;</span><br></pre></td></tr></table></figure></p><h3 id="step4"><a href="#step4" class="headerlink" title="step4"></a>step4</h3><p>接下来创建routes文件夹， 并创建book的路径<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir routes</span><br><span class="line">touch routes/book.js</span><br></pre></td></tr></table></figure></p><p>编辑book.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.Router();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* GET home page. */</span></span><br><span class="line">router.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  res.send(<span class="string">'Express RESTful API'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router;</span><br></pre></td></tr></table></figure></p><p>现在可以运行项目了, 输入网址 ‘<a href="http://localhost:3000/book&#39;" target="_blank" rel="noopener">http://localhost:3000/book&#39;</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm start</span><br></pre></td></tr></table></figure></p><p><img src="/uploads/2018-07-03-01.png" alt="alt text"></p><p>To be continue…</p>]]></content>
      
      
        <tags>
            
            <tag> Angular5 </tag>
            
            <tag> Node.Js </tag>
            
            <tag> MongoDB </tag>
            
            <tag> Express </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Angular5 CRUD Operation Using Node, Express, MongoDB</title>
      <link href="/2018/07/02/Angular5/"/>
      <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>在这篇博客中， 我们将创建一个基础的CRUD应用， 前端会用到Angular CLI，后端会用到 Node.js, Express, MongoDB</p><h3 id="Step1"><a href="#Step1" class="headerlink" title="Step1"></a>Step1</h3><p>没有安装 angular cli 的可以先安装 angular cli</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @angular/client</span><br></pre></td></tr></table></figure><h3 id="Step2"><a href="#Step2" class="headerlink" title="Step2"></a>Step2</h3><p>创建一个新项目， 我们可以命名为 AngularCRUD</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng new AngularCRUD</span><br></pre></td></tr></table></figure><h3 id="Step3"><a href="#Step3" class="headerlink" title="Step3"></a>Step3</h3><p>进入项目， 并且用IDE打开， 同时这时候我们已经可以运行项目了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> AngularCRUD</span><br><span class="line">Atom .</span><br><span class="line">ng server - o</span><br></pre></td></tr></table></figure><p>-o 表示用默认的浏览器运行项目<br><img src="/uploads/2018-07-02-01.png" alt="alt text"></p><h3 id="Step4"><a href="#Step4" class="headerlink" title="Step4"></a>Step4</h3><p>然后请安装 Express, Mongoose bodyParser</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install express --save</span><br><span class="line">npm install mongoose --save</span><br><span class="line">npm install body-parser --save</span><br></pre></td></tr></table></figure><h3 id="Step5"><a href="#Step5" class="headerlink" title="Step5"></a>Step5</h3><p>在根目录下创建 server.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var path = require(&quot;path&quot;);</span><br><span class="line">var bodyParser = require(&apos;body-parser&apos;);</span><br><span class="line">var mongo = require(&quot;mongoose&quot;);</span><br><span class="line"></span><br><span class="line">var db = mongo.connect(&quot;mongodb://localhost:27017/AngularCRUD&quot;, function(err, response)&#123;</span><br><span class="line">   if(err)&#123; console.log( err); &#125;</span><br><span class="line">   else&#123; console.log(&apos;Connected to &apos; + db, &apos; + &apos;, response); &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var app = express()</span><br><span class="line">app.use(bodyParser());</span><br><span class="line">app.use(bodyParser.json(&#123;limit:&apos;5mb&apos;&#125;));</span><br><span class="line">app.use(bodyParser.urlencoded(&#123;extended:true&#125;));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.use(function (req, res, next) &#123;</span><br><span class="line">     res.setHeader(&apos;Access-Control-Allow-Origin&apos;, &apos;http://localhost:4200&apos;);</span><br><span class="line">     res.setHeader(&apos;Access-Control-Allow-Methods&apos;, &apos;GET, POST, OPTIONS, PUT, PATCH, DELETE&apos;);</span><br><span class="line">     res.setHeader(&apos;Access-Control-Allow-Headers&apos;, &apos;X-Requested-With,content-type&apos;);</span><br><span class="line">     res.setHeader(&apos;Access-Control-Allow-Credentials&apos;, true);</span><br><span class="line">     next();</span><br><span class="line"> &#125;);</span><br><span class="line"></span><br><span class="line"> var Schema = mongo.Schema;</span><br><span class="line"></span><br><span class="line">var UsersSchema = new Schema(&#123;</span><br><span class="line"> name: &#123; type: String   &#125;,</span><br><span class="line"> address: &#123; type: String   &#125;,</span><br><span class="line">&#125;,&#123; versionKey: false &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var model = mongo.model(&apos;users&apos;, UsersSchema, &apos;users&apos;);</span><br><span class="line"></span><br><span class="line">app.post(&quot;/api/SaveUser&quot;,function(req,res)&#123;</span><br><span class="line"> var mod = new model(req.body);</span><br><span class="line"> if(req.body.mode ==&quot;Save&quot;)</span><br><span class="line"> &#123;</span><br><span class="line">    mod.save(function(err,data)&#123;</span><br><span class="line">      if(err)&#123;</span><br><span class="line">         res.send(err);</span><br><span class="line">      &#125;</span><br><span class="line">      else&#123;</span><br><span class="line">          res.send(&#123;data:&quot;Record has been Inserted..!!&quot;&#125;);</span><br><span class="line">      &#125;</span><br><span class="line"> &#125;);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line"> model.findByIdAndUpdate(req.body.id, &#123; name: req.body.name, address: req.body.address&#125;,</span><br><span class="line">   function(err,data) &#123;</span><br><span class="line">   if (err) &#123;</span><br><span class="line">   res.send(err);</span><br><span class="line">   &#125;</span><br><span class="line">   else&#123;</span><br><span class="line">          res.send(&#123;data:&quot;Record has been Updated..!!&quot;&#125;);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> &#125;)</span><br><span class="line"></span><br><span class="line"> app.post(&quot;/api/deleteUser&quot;,function(req,res)&#123;</span><br><span class="line">    model.remove(&#123; _id: req.body.id &#125;, function(err) &#123;</span><br><span class="line">     if(err)&#123;</span><br><span class="line">         res.send(err);</span><br><span class="line">     &#125;</span><br><span class="line">     else&#123;</span><br><span class="line">            res.send(&#123;data:&quot;Record has been Deleted..!!&quot;&#125;);</span><br><span class="line">        &#125;</span><br><span class="line"> &#125;);</span><br><span class="line">   &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> app.get(&quot;/api/getUser&quot;,function(req,res)&#123;</span><br><span class="line">    model.find(&#123;&#125;,function(err,data)&#123;</span><br><span class="line">              if(err)&#123;</span><br><span class="line">                  res.send(err);</span><br><span class="line">              &#125;</span><br><span class="line">              else&#123;</span><br><span class="line">                  res.send(data);</span><br><span class="line">                  &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.listen(8080, function () &#123;</span><br><span class="line"></span><br><span class="line"> console.log(&apos;Example app listening on port 8080!&apos;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>打开另外的command， 运行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node server.js</span><br></pre></td></tr></table></figure></p><h3 id="Step6"><a href="#Step6" class="headerlink" title="Step6"></a>Step6</h3><p>创建Angular Service<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng g s common -spec=<span class="literal">false</span></span><br></pre></td></tr></table></figure></p><p>输入以下代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Injectable &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Http, Response, Headers, RequestOptions &#125; <span class="keyword">from</span> <span class="string">'@angular/http'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; observable &#125; <span class="keyword">from</span> <span class="string">'rxjs/Observable'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'rxjs/add/operator/map'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'rxjs/add/operator/do'</span>;</span><br><span class="line"></span><br><span class="line">@Injectable()</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(private http: Http) &#123; &#125;</span><br><span class="line"></span><br><span class="line">  saveUser(user) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.http.post(<span class="string">'http://localhost:8080/api/SaveUser/'</span>, user)</span><br><span class="line">            .map(<span class="function">(<span class="params">response: Response</span>) =&gt;</span> response.json());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getUser() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.http.get(<span class="string">'http://localhost:8080/api/getUser/'</span>)</span><br><span class="line">            .map(<span class="function">(<span class="params">response: Response</span>) =&gt;</span> response.json());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  deleteUser(id) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.http.post(<span class="string">'http://localhost:8080/api/deleteUser/'</span>, &#123;<span class="string">'id'</span>: id&#125;)</span><br><span class="line">            .map(&#123;<span class="attr">response</span>: Response&#125; =&gt; response.json());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Step7"><a href="#Step7" class="headerlink" title="Step7"></a>Step7</h3><p>现在创建我们的View, 修改 app.module.ts 文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; BrowserModule &#125; <span class="keyword">from</span> <span class="string">'@angular/platform-browser'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; NgModule &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; HttpModule &#125; <span class="keyword">from</span> <span class="string">'@angular/http'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; FormsModule &#125; <span class="keyword">from</span> <span class="string">'@angular/forms'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; AppComponent &#125; <span class="keyword">from</span> <span class="string">'./app.component'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; CommonService &#125; <span class="keyword">from</span> <span class="string">'./common.service'</span>;</span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">  declarations: [</span><br><span class="line">    AppComponent</span><br><span class="line">  ],</span><br><span class="line">  imports: [</span><br><span class="line">    BrowserModule,HttpModule,FormsModule</span><br><span class="line">  ],</span><br><span class="line">  providers: [CommonService],</span><br><span class="line">  bootstrap: [AppComponent]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure><p>修改 app.component.html<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> #<span class="attr">userForm</span>=<span class="string">"ngForm"</span>   (<span class="attr">ngSubmit</span>)=<span class="string">"onSave(userForm.value)"</span> <span class="attr">novalidate</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Is "myForm" valid? &#123;&#123;userForm.valid&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">'1'</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>name<span class="tag">&lt;/<span class="name">td</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">type</span>=<span class="string">"hidden"</span>     [(<span class="attr">ngModel</span>)]=<span class="string">"id"</span> /&gt;</span>  </span><br><span class="line">     <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">type</span>=<span class="string">"text"</span>  <span class="attr">required</span>  [(<span class="attr">ngModel</span>)]=<span class="string">"name"</span> /&gt;</span>  </span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;/<span class="name">td</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>address<span class="tag">&lt;/<span class="name">td</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"address"</span> <span class="attr">required</span>  <span class="attr">type</span>=<span class="string">"text"</span>   [(<span class="attr">ngModel</span>)]=<span class="string">"address"</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"&#123;&#123;valbutton&#125;&#125;"</span> /&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">td</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;/<span class="name">table</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span>   </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">'1'</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>Id<span class="tag">&lt;/<span class="name">td</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">td</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>Address<span class="tag">&lt;/<span class="name">td</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>Edit<span class="tag">&lt;/<span class="name">td</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>Delete<span class="tag">&lt;/<span class="name">td</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span> *<span class="attr">ngFor</span>=<span class="string">"let kk of Repdata;let ind = index"</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;ind + 1&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;kk.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;kk.address&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> (<span class="attr">click</span>)=<span class="string">"edit(kk)"</span> <span class="attr">style</span>=<span class="string">"color:blueviolet"</span>&gt;</span>Edit<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> (<span class="attr">click</span>)=<span class="string">"delete(kk._id)"</span> <span class="attr">style</span>=<span class="string">"color:blueviolet"</span>&gt;</span>Delete<span class="tag">&lt;/<span class="name">a</span>&gt;</span>  <span class="tag">&lt;/<span class="name">td</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>修改 component 文件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, OnInit &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; FormGroup,FormControl,Validators,FormsModule, &#125; <span class="keyword">from</span> <span class="string">'@angular/forms'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; CommonService &#125; <span class="keyword">from</span> <span class="string">'./common.service'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; Http,Response, Headers, RequestOptions &#125; <span class="keyword">from</span> <span class="string">'@angular/http'</span>;   ;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">'app-root'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./app.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./app.component.css'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppComponent</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span> (private newService : CommonService) &#123;&#125;</span><br><span class="line">  Repdata ;</span><br><span class="line">  valbutton = <span class="string">"Save"</span>;</span><br><span class="line"></span><br><span class="line">  ngOnInit() &#123;</span><br><span class="line">    <span class="keyword">this</span>.newService.GetUser().subscribe(</span><br><span class="line">      data =&gt; (<span class="keyword">this</span>.Repdata = data; <span class="built_in">console</span>.log(<span class="keyword">this</span>.Repdata))</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onSave = <span class="function"><span class="keyword">function</span> (<span class="params">user, isValid: boolean</span>) </span>&#123;</span><br><span class="line">    user.mode = <span class="keyword">this</span>.valbutton;</span><br><span class="line">    <span class="keyword">this</span>.newService.saveUser(user)</span><br><span class="line">      .subscribe(<span class="function"><span class="params">data</span> =&gt;</span> &#123; alert(data.data);</span><br><span class="line">        <span class="keyword">this</span>.ngOnInit();</span><br><span class="line">      &#125;,</span><br><span class="line">      error =&gt; <span class="keyword">this</span>.errorMessage = error)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  edit = <span class="function"><span class="keyword">function</span> (<span class="params">kk</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.id = kk._id;</span><br><span class="line">    <span class="keyword">this</span>.name = kk.name;</span><br><span class="line">    <span class="keyword">this</span>.address = kk.address;</span><br><span class="line">    <span class="keyword">this</span>.valbutton = <span class="string">"Update"</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">delete</span> = <span class="function"><span class="keyword">function</span> (<span class="params">id</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.newService.deleteUser(id)</span><br><span class="line">      .subscribe(<span class="function"><span class="params">data</span> =&gt;</span> &#123;alert(data.data); <span class="keyword">this</span>.ngOnInit();&#125;, error =&gt; <span class="keyword">this</span>.errorMessage = error)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Step8"><a href="#Step8" class="headerlink" title="Step8"></a>Step8</h3><p>node server.js 运行server， ng server 跑项目， 大功告成， 极简的app， 用于熟悉如何使用Angular5和Express</p><p><img src="/uploads/2018-07-02-02.png" alt="alt text"></p><p>Reference:</p><ul><li><a href="https://www.c-sharpcorner.com/article/angular-5-crud-opration-using-nodeexpressmongo/" target="_blank" rel="noopener">Angular 5 CRUD Operation Using Node, Express, MongoDB</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> Angular5 </tag>
            
            <tag> Node.Js </tag>
            
            <tag> MongoDB </tag>
            
            <tag> Express </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>用 Node.Js Express MongoDB 搭建 Web 应用 2</title>
      <link href="/2018/04/06/nodejs2/"/>
      <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>在之前一篇博客中， 我们了解到了如何用Express框架创建一个Node.js Web应用，以及Expree是如何运行一个web server， 我们是如何用app.get 和app.post 和服务器数据库的。</p><p>在这篇博客中，我们要学习如何修改之前的app，让它成为一个single page 应用，我们的目标有</p><ol><li>理解 REST 是什么意思</li><li>在MongoDB 中用HTTP POST 和 HTTP GET 存储和索引 JSON 数据</li><li>用HTTP DELETE 数据</li><li>用AJAX处理前后端数据传输</li><li>用JQuery update DOM</li></ol><h2 id="Part-1-REST到底是啥"><a href="#Part-1-REST到底是啥" class="headerlink" title="Part 1 - REST到底是啥"></a>Part 1 - REST到底是啥</h2><p>Wiki百科中的答案是 Representational State Transfer (REST) as: an architectural style that abstracts the architectural elements within a distributed hypermedia system. 不知道你是不是看得懂，反正我是完全不是到他在说啥。到底啥是分布式超媒体系统 ？！！引用<a href="https://www.ibm.com/developerworks/webservices/library/ws-restful/" target="_blank" rel="noopener">IBM</a>的解释是:</p><ol><li>Use HTTP methods</li><li>Be stateless</li><li>Expose directory structure-like URIs</li><li>Trander XML, JSON</li></ol><p>Use HTTP methods, 使用HTTP协议，这很容易理解，索引数据用GET，创建数据用POST， 修改数据用PUT， 删除数据用DELETE.<br>Be stateless, 就是 不要存储state信息到server. 如何你必须要save state的话，用cookies或者其他方式把它存到client side. 比如说Angular就很好的解决了这个问题， 它创建了一个权证的前端MVC， 你可以所以存储和操作state 而不会影响server。 可以联想到Angular的route.<br>Expose directory structure-like URIs. 这很简单， 我们用<br><a href="http://app.com/files/video/skyrim/68" target="_blank" rel="noopener">http://app.com/files/video/skyrim/68</a><br>代替了<br><a href="http://app.com/getfile.php?type=video&amp;game=skyrim&amp;pid=68" target="_blank" rel="noopener">http://app.com/getfile.php?type=video&amp;game=skyrim&amp;pid=68</a><br>Transder XML, JSON. 确保后端会传出XML或者是JSON格式的数据。</p><p>我们现在有了对REST的了解， 让我们回到项目中。</p><h2 id="Part-2-Setup"><a href="#Part-2-Setup" class="headerlink" title="Part 2 - Setup"></a>Part 2 - Setup</h2><p>我们将要创建的是一个关于jusernames 和emails的数据库， </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm update -g express</span><br></pre></td></tr></table></figure><p>更新xpress</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm update -g express-generator</span><br></pre></td></tr></table></figure><p>跟新express generator</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">express nodetest2</span><br></pre></td></tr></table></figure><p>创建一个新的node.js 项目nodetest2, 然后打开package文件，更新我们所需的dependencies, 确保我们添加了mongodb和monk</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"nodetest2"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"0.0.0"</span>,</span><br><span class="line">  <span class="attr">"private"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"start"</span>: <span class="string">"node ./bin/www"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"body-parser"</span>: <span class="string">"~1.18.2"</span>,</span><br><span class="line">    <span class="attr">"cookie-parser"</span>: <span class="string">"~1.4.3"</span>,</span><br><span class="line">    <span class="attr">"debug"</span>: <span class="string">"~2.6.9"</span>,</span><br><span class="line">    <span class="attr">"express"</span>: <span class="string">"~4.15.5"</span>,</span><br><span class="line">    <span class="attr">"jade"</span>: <span class="string">"~1.11.0"</span>,</span><br><span class="line">    <span class="attr">"mongodb"</span>: <span class="string">"~3.0.1"</span>,</span><br><span class="line">    <span class="attr">"monk"</span>: <span class="string">"~6.0.5"</span>,</span><br><span class="line">    <span class="attr">"morgan"</span>: <span class="string">"~1.9.0"</span>,</span><br><span class="line">    <span class="attr">"serve-favicon"</span>: <span class="string">"~2.4.5"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后回到command termina， 在nodetest2文件夹中， 输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p>我们会需要一些时间下载和安装所有的dependencies, 之后再输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir data</span><br></pre></td></tr></table></figure><p>创建一个data文件夹， 之后我们会用来存储我们的数据库文件. 要记住的是在运行MongoDB之前，我们必须要有这么个数据库目录. 当然我们可以另取名字.</p><h2 id="Part-3-HTML"><a href="#Part-3-HTML" class="headerlink" title="Part 3 - HTML"></a>Part 3 - HTML</h2><p>如果我们想要搭建一个single page web应用的话， 第一件我们要做的事就是创建一个single page页面. 用你们所喜欢的IDE或者EDITOR打开项目， 首先修改layout.jade, 这是我们项目所有的page模板</p>]]></content>
      
      
        <tags>
            
            <tag> Node.Js </tag>
            
            <tag> MongoDB </tag>
            
            <tag> Express </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>用 Node.Js Express MongoDB 搭建 Web 应用</title>
      <link href="/2018/03/03/2018-03-02-nodejs/"/>
      <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>现在大概有上百万个关于用Node.js搭建“Hello，World”的教程。如果你的目标是问候这个世界然后放弃自己的职业生涯，那已经足够了。 然而大部分的我们并不是这样的， 所以我们要寻找更多更好的教程。 我也寻找了不少， 所以总结了很多， 希望这个教程能够对刚开始学习Node.js 或者想从事网页开发的你有所帮助。</p><h2 id="Part-1-15分钟的安装"><a href="#Part-1-15分钟的安装" class="headerlink" title="Part 1 - 15分钟的安装"></a>Part 1 - 15分钟的安装</h2><h3 id="Step-1-安装-Node-js-和-NPM"><a href="#Step-1-安装-Node-js-和-NPM" class="headerlink" title="Step 1 - 安装 Node.js 和 NPM"></a>Step 1 - 安装 Node.js 和 NPM</h3><ol><li>XCode 在Mac上安装XCode</li><li><p>Homebrew 这是Mac上用于package管理的</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ruby -e <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></span><br></pre></td></tr></table></figure></li><li><p>打开Terminal 安装node.js</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install node</span><br></pre></td></tr></table></figure></li></ol><h3 id="Step2-安装-Express-Generator"><a href="#Step2-安装-Express-Generator" class="headerlink" title="Step2 - 安装 Express Generator"></a>Step2 - 安装 Express Generator</h3><p>Express 是基于Node.js的Web开发框架，可以快速地搭建一个完整功能的网站<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g express-generator</span><br></pre></td></tr></table></figure></p><p>More info: <a href="http://javascript.ruanyifeng.com/nodejs/express.html" target="_blank" rel="noopener">Express</a></p><h3 id="Step3-创建-Express-项目"><a href="#Step3-创建-Express-项目" class="headerlink" title="Step3 - 创建 Express 项目"></a>Step3 - 创建 Express 项目</h3><p>这里我们将会用到Express和Jade，而不是常用的CSS. 因为我们必须用Jade或者其他的模板引擎去得到基于Node/Express的数据。 </p><p>现在我们用express来创建一个叫做 nodetest1 的项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ express nodetest1</span><br></pre></td></tr></table></figure><p><img src="/uploads/2018-03-02-01.png" alt="alt text"></p><p>More info: <a href="https://segmentfault.com/a/1190000000357534" target="_blank" rel="noopener">Jade</a></p><h3 id="Step4-修改-Dependencies"><a href="#Step4-修改-Dependencies" class="headerlink" title="Step4 - 修改 Dependencies"></a>Step4 - 修改 Dependencies</h3><p>Express-generator 自动帮我们创建了package.json文件</p><p><img src="/uploads/2018-03-02-02.png" alt="alt text"></p><p>这个文件里包含了项目所有的dependencies. 我们将添加MongoDB和Monk, 版本3.0.1/6.0.5</p><p><img src="/uploads/2018-03-02-03.png" alt="alt text"></p><h3 id="Step5-安装-Dependencies"><a href="#Step5-安装-Dependencies" class="headerlink" title="Step5 - 安装 Dependencies"></a>Step5 - 安装 Dependencies</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install</span><br></pre></td></tr></table></figure><p>npm 将会根据JSON文件安装所有所需求的dependencies, 包括Express， 我们虽然安装了全局的Express，但是对于指定的项目我们还是需要安装实际的module.<br>现在我们就可以跑项目了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm start</span><br></pre></td></tr></table></figure><p><img src="/uploads/2018-03-02-04.png" alt="alt text"></p><p>如图可见就是我们运行起来的Node.JS的webserver， 下面有一些Express.js的Cheat Sheet</p><p>More info: <a href="https://github.com/azat-co/cheatsheets/tree/master/express4" target="_blank" rel="noopener">Express.js</a></p><h2 id="Part-2-哈哈-既然打开了Node-Js的大门-我们也要高喊一声-“Hello-World”"><a href="#Part-2-哈哈-既然打开了Node-Js的大门-我们也要高喊一声-“Hello-World”" class="headerlink" title="Part 2 哈哈 既然打开了Node.Js的大门 我们也要高喊一声 “Hello, World”"></a>Part 2 哈哈 既然打开了Node.Js的大门 我们也要高喊一声 “Hello, World”</h2><p>随便用你喜欢的IDE或者editor打开我们项目中的 app.js</p><p><img src="/uploads/2018-03-02-05.png" alt="alt text"></p><p>在app.js中我们建了一串Javascript变量， 它们关联到特定的packages，dependencies，node functionality 和 routes. Routes在setup中把models和controllers组合起来，当然我们也可以用Express来搭建MVC架构， 之后我可以单独的介绍. 我们先暂时忽略Express为我们创建的user route， 我们现在只用到最顶层的route (/node/nodetest1/routes/index.js)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = express();</span><br></pre></td></tr></table></figure><p>这将会初始化Express同时设置所有的app 变量. 下一节中我们会用这些变量配置我们的Express</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="comment">// view engine setup</span></span><br><span class="line">app.set(<span class="string">'views'</span>, path.join(dirname, <span class="string">'views'</span>));</span><br><span class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'jade'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// uncomment after placing your favicon in /public</span></span><br><span class="line"><span class="comment">// app.use(favicon(dirname + '/public/favicon.ico'));</span></span><br><span class="line">app.use(logger(<span class="string">'dev'</span>));</span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;));</span><br><span class="line">app.use(cookieParser());</span><br><span class="line">app.use(express.static(path.join(__dirname, <span class="string">'public'</span>)));</span><br><span class="line"></span><br><span class="line">app.use(<span class="string">'/'</span>, routes);</span><br><span class="line">app.use(<span class="string">'/users'</span>, users);</span><br></pre></td></tr></table></figure><p>上段代码告诉我们哪里能找到views以及什么引擎会渲染views (Jade)，同时call了一些方法确保项目能跑起来。这里要说的是最后一行指令Express从/public/dir起创建静态对象，但是让他们看起来是root dir或者说是top level. 比如说images的路径是 c:\node\nodetest1\public\images … 但是我们可以用 <a href="http://localhost:3000/images" target="_blank" rel="noopener">http://localhost:3000/images</a> 找到他们.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// catch 404 and forwarding to error handler</span></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> err = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Not Found'</span>);</span><br><span class="line">  err.status = <span class="number">404</span>;</span><br><span class="line">  next(err);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// error handler</span></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">err, req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// set locals, only providing error in development</span></span><br><span class="line">  res.locals.message = err.message;</span><br><span class="line">  res.locals.error = req.app.get(<span class="string">'env'</span>) === <span class="string">'development'</span> ? err : &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// render the error page</span></span><br><span class="line">  res.status(err.status || <span class="number">500</span>);</span><br><span class="line">  res.render(<span class="string">'error'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这是production和development的error handler， 很明显在production模式下我们并不想打印出所有的stack trace让所有人看见</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = app;</span><br></pre></td></tr></table></figure><p>Node的一个核心思想是所有的模块都会输出一个对象，然后这个对象可以在任意其他地方调用，我们的Master app将会输出这个app对象. </p><p>现在我们就要在页面中展示”hellow, world!”了， 当然我们不仅限于此， 更重要的是借此机会我们会学一些routes， 同时了解一下Jade是如何将页面一起展示出的.</p><p>我们会从加一个新的app开始， 调用如下指令</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="string">'/'</span>, routes);</span><br><span class="line">app.use(<span class="string">'/user'</span>, users);</span><br></pre></td></tr></table></figure><p>这个指令告诉了Express什么routes文件将会被调用, 一般来说, 我提倡对项目中不同的部分创建不同的route文件. 比如说users route文件可能包含了adding users， deleting user, updating users等等routes， 同时如果我们有另一个新的route文件“locations”，它可能同样包含了adding, editing, deleting和displaying. 现在为了简单， 我将会把所有的routes都放进index router, 你可以完全忽视users.</p><p>记住的是Express框架已经在index router中定义了routes变量，我们将会给这个router加一个新的“helloworld“方法， 这个方法将会渲染一个新的页面而不是默认界面, 在你的编辑器中找到routes文件夹和index.js文件. 如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.Router();</span><br><span class="line"></span><br><span class="line"><span class="comment">// GET home page. </span></span><br><span class="line">router.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.render(<span class="string">'index'</span>, &#123; <span class="attr">title</span>: <span class="string">'Express'</span> &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router;</span><br></pre></td></tr></table></figure><p>这简单地说就是当我们请求HTTP拿到根目录的时候，会调用Express的router方法，并最终输出这个router方法给我的app.</p><p>我们可以复制这段get代码，从而拿到helloworld页面. 在exports上面加入以下代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// GET Hello World page. </span></span><br><span class="line">router.get(<span class="string">'/helloworld'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.render(<span class="string">'helloworld'</span>, &#123; <span class="attr">title</span>: <span class="string">'Hello, World!'</span> &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这段代码会处理URL的路径选择， 但是我们并没有页面去渲染render，这时Jade就派上用场了。 你可以打开index.jade进行修改，也可以重新建立一个文件helloworld.jade.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">extends layout</span><br><span class="line"></span><br><span class="line">block content</span><br><span class="line">  h1= title</span><br><span class="line">  p Welcome to #&#123;title&#125;</span><br></pre></td></tr></table></figure><p>这段代码十分的直观，引用了layout.jade作为模板，然后在layout中的content中加入header和paragraph. title是我们从index.js中传入的变量。</p><p>打开终端， ctrl-c 关闭已跑的server，然后再次输入 npm start，重新启动server，地址栏输入<a href="http://localhost:3000/helloworld" target="_blank" rel="noopener">http://localhost:3000/helloworld</a></p><p><img src="/uploads/2018-03-02-06.png" alt="alt text"></p><p>现在为止我们就知道如何用router选择页面了</p><p>More info: </p><ul><li><a href="http://blog.csdn.net/qq_14998713/article/details/62416901" target="_blank" rel="noopener">Morgan</a> </li><li><a href="https://www.cnblogs.com/chyingp/p/node-learning-guide-express-morgan.html" target="_blank" rel="noopener">logs</a></li><li><a href="https://github.com/expressjs/cookie-parser" target="_blank" rel="noopener">cookie-parser</a></li></ul><h2 id="Part-3-创建数据库以及读取数据"><a href="#Part-3-创建数据库以及读取数据" class="headerlink" title="Part 3 创建数据库以及读取数据"></a>Part 3 创建数据库以及读取数据</h2><h3 id="Step-1-安装MongoDB"><a href="#Step-1-安装MongoDB" class="headerlink" title="Step 1 - 安装MongoDB"></a>Step 1 - 安装MongoDB</h3><p>之前运行npm install的时候会根据package里的dependencies安装MongoDB， 如果没有的话可以运行以下指令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install mongodb --save</span><br></pre></td></tr></table></figure></p><h3 id="Step-2-运行mongod和mongo"><a href="#Step-2-运行mongod和mongo" class="headerlink" title="Step 2 - 运行mongod和mongo"></a>Step 2 - 运行mongod和mongo</h3><p>在nodetest1的目录中创建子目录data<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir data</span><br></pre></td></tr></table></figure></p><p>接下来启动mongo server, 我们的例子的话就是mongod –dbpath data<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mongod --dbpath [wherever you put your data folder]</span><br></pre></td></tr></table></figure></p><p>这时在terminal输入mongo的话， 会创建mongo实例， 同时database的connect已经连接上了<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ mongo</span><br><span class="line">MongoDB shell version v3.6.2</span><br><span class="line">connecting to: mongodb://127.0.0.1:27017</span><br><span class="line">MongoDB server version: 3.6.2</span><br><span class="line">Server has startup warnings:</span><br></pre></td></tr></table></figure></p><h3 id="Step-3-创建数据库"><a href="#Step-3-创建数据库" class="headerlink" title="Step 3 - 创建数据库"></a>Step 3 - 创建数据库</h3><p>在terminal直接输入以下代码，会自动创建或者使用你命名的数据库<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ use nodetest1</span><br></pre></td></tr></table></figure></p><p>此时我们就会使用nodetest这个数据库了</p><h3 id="Step-4-加入数据"><a href="#Step-4-加入数据" class="headerlink" title="Step 4 - 加入数据"></a>Step 4 - 加入数据</h3><p>mongodb最让人喜欢的一点可能就是它用JSON定义了结构，或者说是sql里的schema. 让我们加一些数据到collection里面. 我们将会有一个简单的数据库，定义用户名，邮箱。 结构如下<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"_id"</span> : <span class="number">1234</span>,</span><br><span class="line">    <span class="attr">"username"</span> : <span class="string">"cwbuecheler"</span>,</span><br><span class="line">    <span class="attr">"email"</span> : <span class="string">"cwbuecheler@nospam.com"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>你当然也可以创建一个自己的id， 但是我认为最好还是让mongo去处理， 因为mongo会自动给每一个高层的数据提供单独的id.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.usercollection.insert(&#123; <span class="string">"username"</span> : <span class="string">"testuser1"</span>, <span class="string">"email"</span> : <span class="string">"testuser1@testdomain.com"</span> &#125;)</span><br></pre></td></tr></table></figure><p>值得指出的是， 这里面的db代表我们的数据库， 也就是上面我们定义过的nodetest1， usercollection可以理解为一个叫做user的table， 而且我们没有必要创建它， 当我们第一次添加值得时候， 它会自动被创建. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.usercollection.find().pretty()</span><br></pre></td></tr></table></figure><p>上面的而一段代码可以帮助我们输出collection里面的数据如下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"_id"</span> : ObjectId(<span class="string">"5202b481d2184d390cbf6eca"</span>),</span><br><span class="line">    <span class="string">"username"</span> : <span class="string">"testuser1"</span>,</span><br><span class="line">    <span class="string">"email"</span> : <span class="string">"testuser1@testdomain.com"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>再输入一些数据<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">newstuff = [&#123; <span class="string">"username"</span> : <span class="string">"testuser2"</span>, <span class="string">"email"</span> : <span class="string">"testuser2@testdomain.com"</span> &#125;, &#123; <span class="string">"username"</span> : <span class="string">"testuser3"</span>, <span class="string">"email"</span> : <span class="string">"testuser3@testdomain.com"</span> &#125;]</span><br><span class="line">db.usercollection.insert(newstuff);</span><br></pre></td></tr></table></figure></p><p>现在我们可以开始与web server的交互了， 你可以用ctrl-c来退出MongoDB控制台。</p><h3 id="Step-5-连接Mongo和Node"><a href="#Step-5-连接Mongo和Node" class="headerlink" title="Step 5 - 连接Mongo和Node"></a>Step 5 - 连接Mongo和Node</h3><p>我们目标生成如下一个HTML<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"mailto:testuser1@testdomain.com"</span>&gt;</span>testuser1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"mailto:testuser2@testdomain.com"</span>&gt;</span>testuser2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"mailto:testuser3@testdomain.com"</span>&gt;</span>testuser3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>你可能会说这个教程是不是也太简单了，对，在这个教程中我们就是要教会最简单的DB读写， 而不是写一个完整的网站. 首先我们需要在app.js中加入最关键的代码以确保能够连上我们的MongoDB. C:\node\nodetest1\app.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">var</span> favicon = <span class="built_in">require</span>(<span class="string">'serve-favicon'</span>);</span><br><span class="line"><span class="keyword">var</span> logger = <span class="built_in">require</span>(<span class="string">'morgan'</span>);</span><br><span class="line"><span class="keyword">var</span> cookieParser = <span class="built_in">require</span>(<span class="string">'cookie-parser'</span>);</span><br><span class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>);</span><br></pre></td></tr></table></figure><p>加入如下三行<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">var</span> favicon = <span class="built_in">require</span>(<span class="string">'serve-favicon'</span>);</span><br><span class="line"><span class="keyword">var</span> logger = <span class="built_in">require</span>(<span class="string">'morgan'</span>);</span><br><span class="line"><span class="keyword">var</span> cookieParser = <span class="built_in">require</span>(<span class="string">'cookie-parser'</span>);</span><br><span class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// New Code</span></span><br><span class="line"><span class="keyword">var</span> mongo = <span class="built_in">require</span>(<span class="string">'mongodb'</span>);</span><br><span class="line"><span class="keyword">var</span> monk = <span class="built_in">require</span>(<span class="string">'monk'</span>);</span><br><span class="line"><span class="keyword">var</span> db = monk(<span class="string">'localhost:27017/nodetest1'</span>);</span><br></pre></td></tr></table></figure></p><p>这三行的意思是我们用’monk’来连接MongoDB，伺服器位置是’localhost’, port是’27017’(MongoDB预设)，数据库名称是’nodetest1’.<br>接下来看以下两句代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="string">'/'</span>, routes);</span><br><span class="line">app.use(<span class="string">'/users'</span>, users);</span><br></pre></td></tr></table></figure><p>use是express中用来处理中间件的方法，它返回一个函数。 中间件(middleware) 是处理HTTP请求的函数，它的特点是， 一个中间件处理完， 再传递给下一个中间件. App实例在运行过程中， 会调用一系列的中间件。每个中间件可以从App实例，接收三个参数，依次为request对象（代表HTTP请求）、response对象（代表HTTP回应），next回调函数（代表下一个中间件）。每个中间件都可以对HTTP请求（request对象）进行加工，并且决定是否调用next方法，将request对象再传给下一个中间件。</p><p>在以上两句代码前加入以下代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Make our db accessible to our router</span></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">req,res,next</span>)</span>&#123;</span><br><span class="line">    req.db = db;</span><br><span class="line">    next();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Note: 如果不把以上代码加到app.use(‘/‘, routes)前面的话， app将不会工作。</p><p>在我们吧Mongo 和 Monk加到app.js的时候， 我们已经定义了’db’. 这是我们的Monk的connection object, 通过吧这个函数加到app.use 中， 我们将会把这个object加到所有的HTTP请求中. 现在完整的app.js如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">var</span> favicon = <span class="built_in">require</span>(<span class="string">'serve-favicon'</span>);</span><br><span class="line"><span class="keyword">var</span> logger = <span class="built_in">require</span>(<span class="string">'morgan'</span>);</span><br><span class="line"><span class="keyword">var</span> cookieParser = <span class="built_in">require</span>(<span class="string">'cookie-parser'</span>);</span><br><span class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// New Code</span></span><br><span class="line"><span class="keyword">var</span> mongo = <span class="built_in">require</span>(<span class="string">'mongodb'</span>);</span><br><span class="line"><span class="keyword">var</span> monk = <span class="built_in">require</span>(<span class="string">'monk'</span>);</span><br><span class="line"><span class="keyword">var</span> db = monk(<span class="string">'localhost:27017/nodetest1'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> routes = <span class="built_in">require</span>(<span class="string">'./routes/index'</span>);</span><br><span class="line"><span class="keyword">var</span> users = <span class="built_in">require</span>(<span class="string">'./routes/users'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">// view engine setup</span></span><br><span class="line">app.set(<span class="string">'views'</span>, path.join(dirname, <span class="string">'views'</span>));</span><br><span class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'jade'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// uncomment after placing your favicon in /public</span></span><br><span class="line"><span class="comment">//app.use(favicon(dirname + '/public/favicon.ico'));</span></span><br><span class="line">app.use(logger(<span class="string">'dev'</span>));</span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;));</span><br><span class="line">app.use(cookieParser());</span><br><span class="line">app.use(express.static(path.join(__dirname, <span class="string">'public'</span>)));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Make our db accessible to our router</span></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">req,res,next</span>)</span>&#123;</span><br><span class="line">    req.db = db;</span><br><span class="line">    next();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(<span class="string">'/'</span>, routes);</span><br><span class="line">app.use(<span class="string">'/users'</span>, users);</span><br><span class="line"></span><br><span class="line"><span class="comment">/// catch 404 and forwarding to error handler</span></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> err = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Not Found'</span>);</span><br><span class="line">    err.status = <span class="number">404</span>;</span><br><span class="line">    next(err);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/// error handlers</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// development error handler</span></span><br><span class="line"><span class="comment">// will print stacktrace</span></span><br><span class="line"><span class="keyword">if</span> (app.get(<span class="string">'env'</span>) === <span class="string">'development'</span>) &#123;</span><br><span class="line">    app.use(<span class="function"><span class="keyword">function</span>(<span class="params">err, req, res, next</span>) </span>&#123;</span><br><span class="line">        res.status(err.status || <span class="number">500</span>);</span><br><span class="line">        res.render(<span class="string">'error'</span>, &#123;</span><br><span class="line">            message: err.message,</span><br><span class="line">            error: err</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// production error handler</span></span><br><span class="line"><span class="comment">// no stacktraces leaked to user</span></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">err, req, res, next</span>) </span>&#123;</span><br><span class="line">    res.status(err.status || <span class="number">500</span>);</span><br><span class="line">    res.render(<span class="string">'error'</span>, &#123;</span><br><span class="line">        message: err.message,</span><br><span class="line">        error: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = app;</span><br></pre></td></tr></table></figure><p>之后我们需要修改我么的route, 然后我们才能展示我们数据库中的数据.</p><p>More info: </p><ul><li><a href="https://www.npmjs.com/package/monk" target="_blank" rel="noopener">Monk</a></li><li><a href="https://codeday.me/bug/20170727/47313.html" target="_blank" rel="noopener">Monk vs Mongoose</a> </li></ul><h3 id="Step-6-–-从Mongo中读取并展示数据"><a href="#Step-6-–-从Mongo中读取并展示数据" class="headerlink" title="Step 6 – 从Mongo中读取并展示数据"></a>Step 6 – 从Mongo中读取并展示数据</h3><p>打开routes\index.js, 我们有index route 和 helloworld 两个route. 现在加入第三个</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//C:\node\nodetest1\routes\index.js</span></span><br><span class="line"><span class="comment">// GET Userlist page. </span></span><br><span class="line">router.get(<span class="string">'/userlist'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> db = req.db;</span><br><span class="line">    <span class="keyword">var</span> collection = db.get(<span class="string">'usercollection'</span>);</span><br><span class="line">    collection.find(&#123;&#125;,&#123;&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">e,docs</span>)</span>&#123;</span><br><span class="line">        res.render(<span class="string">'userlist'</span>, &#123;</span><br><span class="line">            <span class="string">"userlist"</span> : docs</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>我们从传到http的请求中提取”db“对象， 然后用db的connection中得到数据， 并和其他两个”gets”一样用来渲染页面。<br>基本上说就是我们告诉app将要用到“usercollection”， 从而返回一个变量“docs”， 一旦我们得到了这个数据， 我们用来渲染userlist（需要一个配套的Jade模板。</p><p>下一步，配置Jade 模板，在C:\node\nodetest1\views\ 中找到index.jade， 保存为userlist.jade</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">extends layout</span><br><span class="line"></span><br><span class="line">block content</span><br><span class="line">  h1.</span><br><span class="line">    User List</span><br><span class="line">  ul</span><br><span class="line">    each user, i in userlist</span><br><span class="line">      li</span><br><span class="line">        a(href=&quot;mailto:#&#123;user.email&#125;&quot;)= user.username</span><br></pre></td></tr></table></figure><p>在index.js route 中我们传递了userlist 这个变量到Jade template， 然后遍历这个变量，可拿到username以及email信息， 并以展现。</p><p>如果node server此刻还在运行的话， ctrl-c以中断， 然后restart server</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm start</span><br></pre></td></tr></table></figure><p>现在打开浏览器， 输入<a href="http://localhost:3000/userlist，" target="_blank" rel="noopener">http://localhost:3000/userlist，</a> 我们就能看到userlist 页面了。</p><p><img src="/uploads/2018-03-02-07.png" alt="alt text"></p><p>现在你可能会觉得现在userlist view是一个完全依赖于Jade template的Express-driven页面，修改起来很麻烦， 我们当然可以用传统的JSON传输， 以及在客户端用AJAX JQuery操控， 之后会有另一篇博客会专门介绍这方面知识。</p><h2 id="Part-4-写入数据到数据库"><a href="#Part-4-写入数据到数据库" class="headerlink" title="Part 4 写入数据到数据库"></a>Part 4 写入数据到数据库</h2><p>写入数据到数据库其实并不难， 本质上说我们要做的只是创建一个route，action type 为POST， 而不是GET。</p><h3 id="Step-1-–-创建输入页面"><a href="#Step-1-–-创建输入页面" class="headerlink" title="Step 1 – 创建输入页面"></a>Step 1 – 创建输入页面</h3><p>我们将简单创建一个最基础的页面user form，一个input box 和 submit button. 打开 /routes/index.js 加入以下代码，我们将在route中定义user form.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// GET New User page. /</span></span><br><span class="line">router.get(<span class="string">'/newuser'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.render(<span class="string">'newuser'</span>, &#123; <span class="attr">title</span>: <span class="string">'Add New User'</span> &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>之后我们需要一个template，在view文件夹中创建 newuser.jade 文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">extends layout</span><br><span class="line"></span><br><span class="line">block content</span><br><span class="line">  h1= title</span><br><span class="line">    form#formAddUser(name=&quot;adduser&quot;,method=&quot;post&quot;,action=&quot;/adduser&quot;)</span><br><span class="line">      input#inputUserName(type=&quot;text&quot;, placeholder=&quot;username&quot;, name=&quot;username&quot;)</span><br><span class="line">      input#inputUserEmail(type=&quot;text&quot;, placeholder=&quot;useremail&quot;, name=&quot;useremail&quot;)</span><br><span class="line">      button#btnSubmit(type=&quot;submit&quot;) submit</span><br></pre></td></tr></table></figure><p>restart 我们的node server，打开浏览器， 输入 <a href="http://localhost:3000/newuser" target="_blank" rel="noopener">http://localhost:3000/newuser</a></p><p><img src="/uploads/2018-03-02-08.png" alt="alt text"></p><p>此时如何你输入并提交的话是会得到server error的， 因为server端并找不到这个方法。 </p><h3 id="Step-2-创建DB方法"><a href="#Step-2-创建DB方法" class="headerlink" title="Step 2 - 创建DB方法"></a>Step 2 - 创建DB方法</h3><p>这个过程与user list非常相同， 我们并不需要另一个app.use 来调用db， 因为我们已经在app.js调用了， 意味着所有的新routes都可以使用， 也就意味着我们只要再加一个route 用于Posting到 adduser中。 </p><p>在/routes/index.js 中创建我们的insertion 方法.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">/ POST to Add User Service /</span><br><span class="line">router.post(<span class="string">'/adduser'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set our internal DB variable</span></span><br><span class="line">    <span class="keyword">var</span> db = req.db;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get our form values. These rely on the "name" attributes</span></span><br><span class="line">    <span class="keyword">var</span> userName = req.body.username;</span><br><span class="line">    <span class="keyword">var</span> userEmail = req.body.useremail;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set our collection</span></span><br><span class="line">    <span class="keyword">var</span> collection = db.get(<span class="string">'usercollection'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Submit to the DB</span></span><br><span class="line">    collection.insert(&#123;</span><br><span class="line">        <span class="string">"username"</span> : userName,</span><br><span class="line">        <span class="string">"email"</span> : userEmail</span><br><span class="line">    &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err, doc</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="comment">// If it failed, return error</span></span><br><span class="line">            res.send(<span class="string">"There was a problem adding the information to the database."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// And forward to success page</span></span><br><span class="line">            res.redirect(<span class="string">"userlist"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>很显然， 我们可以加入更多的validation条件，比如说判断是否有重复的usernames 和 emails。 以上代码在成功加入新的entry到数据库后，我们将redirect user 回到userlist页面， 他们将可以看到他们所新加入和user。</p><h3 id="Step-3-–-连接并写入数据到数据库"><a href="#Step-3-–-连接并写入数据到数据库" class="headerlink" title="Step 3 – 连接并写入数据到数据库"></a>Step 3 – 连接并写入数据到数据库</h3><p>首先restart 我们的server npm start, 重新在浏览器中输入<a href="http://localhost:3000/newuser" target="_blank" rel="noopener">http://localhost:3000/newuser</a></p><p><img src="/uploads/2018-03-02-09.png" alt="alt text"></p><p>submit 后可见</p><p><img src="/uploads/2018-03-02-10.png" alt="alt text"></p><p>恭喜你，到目前为止，我们成功地用 Node.js, Express 和 Jade 读取并且写入数据到我们的mongoDB中，可以说我们现在已经初入了Full stack 全栈工程师的门径了， 之后我还会继续学习与更新， 希望可以和大家一起进步。 </p><p>Reference: </p><ul><li><a href="https://closebrace.com/tutorials/2017-03-02/the-dead-simple-step-by-step-guide-for-front-end-developers-to-getting-up-and-running-with-nodejs-express-and-mongodb" target="_blank" rel="noopener">Guide for Front-End Developers to Getting Up and Running With Node.JS, Express, and MongoDB</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> Node.Js </tag>
            
            <tag> MongoDB </tag>
            
            <tag> Express </tag>
            
        </tags>
      
    </entry>
    
  
  
    
    <entry>
      <title>All tags</title>
      <link href="/tags/index.html"/>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
    <entry>
      <title>About</title>
      <link href="/about/index.html"/>
      <content type="html"><![CDATA[<h2 id="Zhihao-Li"><a href="#Zhihao-Li" class="headerlink" title="Zhihao Li"></a>Zhihao Li</h2><hr><p>Wake up early. Drink coffee. Work hard. Be ambitious. Keep your priorities straight, your mind right and your head up. Do well, live well and play really well. Do what you love, love what you do.</p><h3 id="PROCESS"><a href="#PROCESS" class="headerlink" title="PROCESS"></a>PROCESS</h3><p>I am preparing to become a great developer and photographer. The most important thing for me is to continually improve myself and prove myself.</p><h3 id="PHILOSOPHY"><a href="#PHILOSOPHY" class="headerlink" title="PHILOSOPHY"></a>PHILOSOPHY</h3><p>Stay hungry. Stay foolish.</p><p>If you can’t forget yesterday, you won’t have a better tomorrow.</p><p>If you dedicate time to do things you like, you’ll become good at them. But if instead, you focused all your energy on negatives thoghts, you’ll simply reinforce them. Definitly, I like coding and photography.</p><h3 id="EXPERIENCES"><a href="#EXPERIENCES" class="headerlink" title="EXPERIENCES"></a>EXPERIENCES</h3><p>SOLFWARE DEVELOPER<br>GEP</p><p>June 2015 – Now </p><h3 id="Skills"><a href="#Skills" class="headerlink" title="Skills"></a>Skills</h3><p>VSP.NET/C#/JAVA/Python/PHP/Node.js<br>AngularJS/Angular 5/ReactJS/JQuery<br>MongoDB/MySQL/ElasticSearch</p><p>Photography</p><hr><h2 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h2><p>设计狮到程序猿の进击</p><hr><p>我不在乎这个世界是怎么回事 </p><p>我只想弄清楚如何在其中生活的精彩</p><hr><p>蜀黍和少年の矛盾体</p><hr><p>三分归元气，七分靠打拼</p><p>剩下九十分看长相</p><hr><p>这波深藏功与名， 这波只能赢</p><hr><p>梦想这东西和经典一样</p><p>永远不会因为时间而褪色</p><p>反而更显珍贵</p><hr><p>你今后会得到很多，也会失去很多</p><p>然而有两样东西，你要记得一定不可以丢弃</p><p>一样叫做理想， 一样叫做良知</p>]]></content>
    </entry>
    
  
</search>
